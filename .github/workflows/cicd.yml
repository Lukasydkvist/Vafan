name: build_eslint

on:
  push:
    branches:
      - '*' # This wildcard matches any branch
  #pull_request:
  #  branches:
  #    - '*'

jobs:
  build-and-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x' # latest 18.x version
          
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.0.0"
        
          #insted of re-install after every run 
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm install

      - name: Build docker Images 
        run : docker-compose build
      
      - name: Authenticate docker for azure container registry
        run: TOKEN=$(az acr login --name scalable --expose-token --output tsv --query accessToken)
             docker login scalable.azurecr.io --username 00000000-0000-0000-0000-0000000000000 --password-stdin <<< $TOKEN

      - name: Push images to azure container registry
        run: docker-compose up

      - name: Run terraform
        run: cd terraform
             terraform init
             terraform apply -auto-approve
             cd ..

      - uses: tale/kubectl-action@v1
        with: base64-kube-config: 
              kubectl-version: v1.24.2
      
      - name: Deploy all kubernetes services and deployments
        run: kubectl apply -f gateway-deployment.yaml
             kubectl apply -f gateway-service.yaml
             kubectl apply -f meeting-deployment.yaml
             kubectl apply -f meeting-service.yaml
             kubectl apply -f user-deployment.yaml
             kubectl apply -f user-service.yaml
             kubectl apply -f main-deployment.yaml
             kubectl apply -f main-service.yaml




